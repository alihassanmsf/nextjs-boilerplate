import { NextRequest, NextResponse } from 'next/server';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

export async function POST(request: NextRequest) {
  try {
    const { data, calculations, chartData, companyInfo } = await request.json();
    
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.text('ACCOUNTING RECEIPT', 105, 15, { align: 'center' });
    
    // Company Info
    doc.setFontSize(12);
    doc.text(`Company: ${companyInfo?.name || 'Accounting Firm'}`, 20, 30);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 40);
    doc.text(`Receipt #: ${Date.now()}`, 20, 50);
    
    // Summary
    doc.setFontSize(14);
    doc.text('SUMMARY', 20, 70);
    
    if (calculations) {
      let yPos = 80;
      Object.entries(calculations).forEach(([key, value]: [string, any]) => {
        doc.setFontSize(10);
        doc.text(`${key.toUpperCase()}:`, 20, yPos);
        doc.text(`Total: $${value.sum?.toFixed(2) || 0}`, 40, yPos);
        doc.text(`Average: $${value.average?.toFixed(2) || 0}`, 80, yPos);
        yPos += 10;
      });
    }
    
    // Data Table
    if (data && data.length > 0) {
      doc.setFontSize(14);
      doc.text('TRANSACTION DETAILS', 20, 120);
      
      const headers = Object.keys(data[0]);
      const rows = data.map((item: any) => headers.map(h => String(item[h] || '')));
      
      (doc as any).autoTable({
        startY: 130,
        head: [headers],
        body: rows,
        theme: 'grid',
        styles: { fontSize: 8 },
        headStyles: { fillColor: [22, 160, 133] }
      });
    }
    
    // Footer
    doc.setFontSize(10);
    doc.text('Generated by Accountant Web App', 105, 280, { align: 'center' });
    
    const pdfBuffer = doc.output('arraybuffer');
    
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="accounting-receipt.pdf"'
      }
    });
  } catch (error) {
    console.error('Error generating receipt:', error);
    return NextResponse.json({ error: 'Failed to generate receipt' }, { status: 500 });
  }
}
